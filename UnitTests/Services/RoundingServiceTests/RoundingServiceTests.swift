import XCTest
@testable import TCABankingApp

final class RoundingServiceTests: XCTestCase {
    func testBatchRounding() throws {
        let systemUnderTest = RoundingService.live
        let expected = Amount(currency: Currency.gbp, minorUnits: 158)
        // Given I have a range of monetary values and add them together to get the round up
        
        // Examples from the problem description
        let result = try systemUnderTest.batchRoundUp([
            Amount(currency: Currency.gbp, minorUnits: 435),
            Amount(currency: Currency.gbp, minorUnits: 520),
            Amount(currency: Currency.gbp, minorUnits: 87),
            // The following should have no effects
            Amount(currency: Currency.gbp, minorUnits: 1500),
            Amount(currency: Currency.gbp, minorUnits: -99),
            Amount(currency: Currency.gbp, minorUnits: 0),
            Amount(currency: Currency.gbp, minorUnits: -0),
        ])
        
        // I expect this result
        XCTAssertEqual(expected, result)
        XCTAssertEqual(expected.displayString, "£1.58")
        
        // Some other examples
        XCTAssertEqual(try systemUnderTest.batchRoundUp([Amount(currency: .gbp, minorUnits: 146)]).minorUnits, 54)
        XCTAssertEqual(try systemUnderTest.batchRoundUp([Amount(currency: .gbp, minorUnits: 1)]).minorUnits, 99)
        XCTAssertEqual(try systemUnderTest.batchRoundUp([Amount(currency: .gbp, minorUnits: 99)]).minorUnits, 1)
        XCTAssertEqual(try systemUnderTest.batchRoundUp([Amount(currency: .gbp, minorUnits: 51)]).minorUnits, 49)
        XCTAssertEqual(try systemUnderTest.batchRoundUp([Amount(currency: .gbp, minorUnits: 101)]).minorUnits, 99)
        
        // This was my autogenerated transaction log - wanted to double check it was right :D
        let result2 = try systemUnderTest.batchRoundUp([
            Amount(currency: Currency.gbp, minorUnits: 50000),
            Amount(currency: Currency.gbp, minorUnits: 200000),
            Amount(currency: Currency.gbp, minorUnits: 1171),
            Amount(currency: Currency.gbp, minorUnits: 3345),
            Amount(currency: Currency.gbp, minorUnits: 3307),
            Amount(currency: Currency.gbp, minorUnits: 2775),
            Amount(currency: Currency.gbp, minorUnits: 534),
            Amount(currency: Currency.gbp, minorUnits: 2451),
            Amount(currency: Currency.gbp, minorUnits: 3034),
            Amount(currency: Currency.gbp, minorUnits: 2315),
            Amount(currency: Currency.gbp, minorUnits: 3686),
            Amount(currency: Currency.gbp, minorUnits: 2832),
            Amount(currency: Currency.gbp, minorUnits: 2681),
            Amount(currency: Currency.gbp, minorUnits: 3895),
            Amount(currency: Currency.gbp, minorUnits: 2299),
        ])
        
        XCTAssertEqual(result2, Amount(currency: Currency.gbp, minorUnits: 575))
    }
    
    func testBatchRoundingZero() throws {
        let systemUnderTest = RoundingService.live
        let expected = Amount(currency: Currency.gbp, minorUnits: 0)
        
        // Given I have a range of monetary values and add them together to get the round up
        let result = try systemUnderTest.batchRoundUp([
            Amount(currency: Currency.gbp, minorUnits: 0),
            Amount(currency: Currency.gbp, minorUnits: 0)
        ])

        // I expect this result
        XCTAssertEqual(expected, result)
        XCTAssertEqual(expected.displayString, "£0.00")
    }
    
    func testBatchRoundingMismatchedCurrency() throws {
        let systemUnderTest = RoundingService.live
        var thrownError: Error?
        
        // Given I have a range of monetary values and add them together to get the round up
        XCTAssertThrowsError(try systemUnderTest.batchRoundUp([
            Amount(currency: Currency.gbp, minorUnits: 50),
            Amount(currency: Currency.eur, minorUnits: 50)
        ])) {
            thrownError = $0
        }

        // Then an error is thrown because of mismatching currencies which can't be compared
        XCTAssertTrue(
            thrownError is RoundingError,
            "Unexpected error type: \(type(of: thrownError))"
        )
        
        XCTAssertEqual(thrownError as? RoundingError, .mismatchedCurrency)
    }
    
    func testBatchRoundingWithHugeAmountOfTransactions() throws {
        let systemUnderTest = RoundingService.live
        var thrownError: Error?

        // Given I have a range of monetary values that is very large
        XCTAssertThrowsError(try systemUnderTest.batchRoundUp(Array(repeating: Amount(currency: .gbp, minorUnits: 1), count: 10000000))) {
            thrownError = $0
        }

        // Then an error is thrown because of mismatching currencies which can't be compared
        XCTAssertTrue(
            thrownError is RoundingError,
            "Unexpected error type: \(type(of: thrownError))"
        )
        
        XCTAssertEqual(thrownError as? RoundingError, .amountSizeTooBig)
    }
}
